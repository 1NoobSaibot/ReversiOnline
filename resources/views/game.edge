<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>ReversiOnline</title>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <script src="https://unpkg.com/vuex"></script>
  {{ style('style') }}
</head>
<body onload="store.dispatch('startGame')">
  <div id="app">
    <table id="board">
      @each(row in m)
        <tr>
          @each(cell in row)
            <td onclick="store.dispatch('move', this)">{{cell ? cell : " "}}</td>
          @endeach
        </tr>
      @endeach
    </table>
  </div>
  <script type="text/JavaScript">
    function updateTable(){
      try{
        let board = store.state.game.board;

        const table = document.getElementById('board');
        for (let i = 0; i < 8; i++)
          for (let j = 0; j < 8; j++)
            table.children[0].children[i].children[j].textContent = board.m[i][j] == '0' ? ' ' : board.m[i][j];
      }catch(e){
        console.error(e.message);
      }
    }

    Vue.use(Vuex);

    const store = new Vuex.Store({
      state: {
        game: null
      },
      mutations: {
        setGame (state, game){
          state.game = game;
          updateTable();
        }
      },
      actions: {
        async move ({commit, dispatch}, cell) {
          
          let x = cell.cellIndex;
          let y = cell.parentNode.rowIndex;
          
          try{
            let res = await postMove(x, y);
            if (res == 'accepted') {
              let game = await postGame();
              commit('setGame', game);
              if (game.board.gameOver) {
                dispatch('restart');
              }
              else if (game.cpuSide == game.board.currentPlayer)
                await dispatch('cpuMove');
            }
          }
          catch(e){
            console.log(e.message);
          }
        },

        async startGame({state, commit, dispatch}){
          let res = await postStartGame();
          if (res != 'GameIsReady') throw new Error('ERROR! Game is not ready');
          let game = await postGame();
          commit('setGame', game);
          if (game.cpuSide == game.board.currentPlayer) await dispatch('cpuMove');
        },

        async cpuMove({commit, dispatch}){
          let game;
          do{
            let res = await postCpuMove();
            if (res == 'accepted') {
              game = await postGame();
              commit('setGame', game);
              if (game.board.gameOver) {
                dispatch('restart');
                break; 
              }
            }
          }while(game.cpuSide == game.board.currentPlayer);
        },

        async restart({commit, dispatch}){
          console.log('GameOver');
          await dispatch('startGame');
        }
      }
          
    });

    const vue = new Vue({
      el: "#app",
      store
    });

    async function postMove(x, y){
      return (await axios.post("{{ url }}/game/simple/move", {params:{x, y}})).data;
    }

    async function postCpuMove(){
      return (await axios.post("{{ url }}/game/simple/cpumove")).data;
    }

    async function postGame(){
      return (await axios.post("{{ url }}/game/simple/game")).data;
    }

    async function postStartGame() {
      return (await axios.post("{{ url }}/game/simple/start")).data;
    }
  </script>
</body>
</html>